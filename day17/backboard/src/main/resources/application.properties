spring.application.name=backboard

# 웹서버 포트
server.port=18120

# 로그색상 변경
spring.output.ansi.enabled=always

# 로그 설정
logging.level.root=info
logging.file.name=C:/temp/backboard.log   # 윈도우

# Ubuntu 맞춰서 변경
# logging.file.name=./log/backboard.log

## 파일 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB
## 파일 업로드 경로
# 윈도우 개발 업로드 경로
spring.servlet.multipart.location=C:/websites/upload/

#Ubuntu 업로드 경로
# spring.servlet.multipart.location=/home/ubuntu/sbserver/upload/

## H2 DB 설정
spring.h2.console.enabled=true
# 접속 URL
spring.h2.console.path=/h2-console
## H2 DB 파일위치 : ~/ (user/Admin/ 에 생성) : ./ 현재프로젝트 폴더 생성
## H2를 사용하려면 주석해제
# 윈도우 개발시 사용
spring.datasource.url=jdbc:h2:./local
# spring.datasource.url=jdbc:h2:~/sbserver/local
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
## H2 용
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


## Oracle 설정
# spring.datasource.url=jdbc:oracle:thin:@localhost:11521:XE
# spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
# spring.datasource.username=backboard
# spring.datasource.password=12345

# # Oracle 용
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect

## JPA 설정 : create 서버 시작시마다 테이블 새로 생성
spring.jpa.hibernate.ddl-auto=update

#테스트시 쿼리확인
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.show_sql=true

spring.thymeleaf.cache=false
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# Whitelabel Error Page 비활성화
server.error.whitelabel.enabled=true
# 에러 메시지 추가
server.error.include-message=always
server.error.include-binding-errors=always

## 구글 OAuth2 설정
# Google Provider URI   # 변화 없음(고정)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# Google OAuth2 개인구성 설정
    # Google 이면 google, 네이버면 naver ...
spring.security.oauth2.client.registration.google.client-name=google   
    # 클라이언트 ID
spring.security.oauth2.client.registration.google.client-id=
    # 클라이언트 보안 비밀번호
spring.security.oauth2.client.registration.google.client-secret=

# Google OAuth2 로그인 진입URI, 스코프 (포트번호 주의)
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:18120/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

